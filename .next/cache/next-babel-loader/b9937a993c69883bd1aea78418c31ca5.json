{"ast":null,"code":"var _jsxFileName = \"/home/pqcuong/Documents/Work/test/taskmanager/src/components/addtask.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useEffect, useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport useSWR, { mutate, trigger } from 'swr';\nimport moment from 'moment';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport config from '../common/config';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  table: {\n    minWidth: 650\n  },\n  caption: {\n    display: 'flex'\n  },\n  input: {\n    width: '100%',\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  },\n  buttonAction: {\n    marginLeft: theme.spacing(1)\n  }\n}));\nconst fetchURL = `${config.apiGetTaskUrl}`;\nexport default function AddTask(props) {\n  const {\n    dataServer,\n    dataType,\n    dataStatus,\n    dataAssignee,\n    setLoading,\n    setOpenSnackBar,\n    setTypeSnack\n  } = props;\n  const {\n    data\n  } = useSWR(fetchURL, {\n    initialData: dataServer\n  });\n  const classes = useStyles();\n  return __jsx(Formik, {\n    initialValues: {\n      task_name: '',\n      task_type: 'Task',\n      start_date: moment(new Date()).format('YYYY-MM-DD').toString(),\n      end_date: moment(new Date()).format('YYYY-MM-DD').toString(),\n      status: 'New',\n      assignee: 'NguyenHao'\n    },\n    onSubmit: async (values, formikHelpers) => {\n      mutate(fetchURL, [...data, values], false);\n      setLoading(true);\n      await axios.post(fetchURL, values);\n      setLoading(false);\n      setTypeSnack(\"Added Successfully\");\n      setOpenSnackBar(true);\n      setTimeout(() => {\n        setOpenSnackBar(false);\n      }, 3000);\n      trigger(fetchURL);\n      console.log(dataDialog);\n      formikHelpers.resetForm();\n      console.log(\"homepage -> typeSnack\", typeSnack);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(Form, {\n    display: \"flex\",\n    p: 1,\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    as: TextField,\n    name: \"task_name\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    size: \"small\",\n    variant: \"outlined\",\n    placeholder: \"task_name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }), __jsx(Field, {\n    as: TextField,\n    select: true,\n    name: \"task_type\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    size: \"small\",\n    variant: \"outlined\",\n    placeholder: \"task_type\" //onChange={handleChangeComboType}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, dataType.map(option => __jsx(\"option\", {\n    key: option.id,\n    value: option.tasktype_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, option.tasktype_name))), __jsx(Field, {\n    as: TextField,\n    type: \"date\",\n    id: \"outlined-basic\",\n    name: \"start_date\",\n    className: classes.input,\n    size: \"small\",\n    defaultValue: moment(new Date()),\n    variant: \"outlined\",\n    placeholder: \"start_date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), __jsx(Field, {\n    as: TextField,\n    type: \"date\",\n    id: \"outlined-basic\",\n    name: \"end_date\",\n    className: classes.input,\n    size: \"small\",\n    defaultValue: moment(new Date()),\n    variant: \"outlined\",\n    placeholder: \"end_date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }), __jsx(Field, {\n    as: TextField,\n    select: true,\n    name: \"status\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    size: \"small\",\n    variant: \"outlined\",\n    placeholder: \"status\" //onChange={handleChangeComboStatus}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, dataStatus && dataStatus.length && dataStatus.map((option, id) => __jsx(\"option\", {\n    key: id,\n    value: option.status_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }, option.status_name))), __jsx(Field, {\n    as: TextField,\n    select: true,\n    name: \"assignee\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    size: \"small\",\n    variant: \"outlined\",\n    placeholder: \"assignee\" //onChange={handleChangeComboAssignee}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, dataAssignee.map((option, id) => __jsx(\"option\", {\n    key: id,\n    value: option.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  }, option.username))), __jsx(Button, {\n    className: classes.button,\n    type: \"submit\",\n    variant: \"contained\",\n    size: \"medium\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, \"ADD\")));\n}","map":{"version":3,"sources":["/home/pqcuong/Documents/Work/test/taskmanager/src/components/addtask.js"],"names":["React","Component","makeStyles","useEffect","useState","Formik","Field","Form","ErrorMessage","useSWR","mutate","trigger","moment","axios","TextField","Button","config","useStyles","theme","root","padding","display","alignItems","table","minWidth","caption","input","width","marginLeft","spacing","flex","button","buttonAction","fetchURL","apiGetTaskUrl","AddTask","props","dataServer","dataType","dataStatus","dataAssignee","setLoading","setOpenSnackBar","setTypeSnack","data","initialData","classes","task_name","task_type","start_date","Date","format","toString","end_date","status","assignee","values","formikHelpers","post","setTimeout","console","log","dataDialog","resetForm","typeSnack","map","option","id","tasktype_name","length","status_name","username"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useEffect, useState } from 'react'\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport useSWR, { mutate, trigger } from 'swr';\nimport moment from 'moment';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport config from '../common/config'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n    },\n    table: {\n        minWidth: 650,\n    },\n    caption: {\n        display: 'flex',\n    },\n    input: {\n        width: '100%',\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    buttonAction: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\nconst fetchURL = `${config.apiGetTaskUrl}`;\n\nexport default function AddTask(props) {\n    const { dataServer, dataType, dataStatus, dataAssignee, setLoading, setOpenSnackBar, setTypeSnack } = props;\n    const { data } = useSWR(fetchURL, { initialData: dataServer });\n    const classes = useStyles();\n    return (\n        <Formik\n            initialValues={{\n                task_name: '',\n                task_type: 'Task',\n                start_date: moment(new Date()).format('YYYY-MM-DD').toString(),\n                end_date: moment(new Date()).format('YYYY-MM-DD').toString(),\n                status: 'New',\n                assignee: 'NguyenHao',\n            }}\n            onSubmit={async (values, formikHelpers) => {\n                mutate(fetchURL, [...data, values], false);\n                setLoading(true);\n                await axios.post(fetchURL, values);\n                setLoading(false);\n                setTypeSnack(\"Added Successfully\");\n                setOpenSnackBar(true);\n                setTimeout(() => {\n                    setOpenSnackBar(false);\n                }, 3000);\n                trigger(fetchURL);\n                console.log(dataDialog);\n                formikHelpers.resetForm();\n                console.log(\"homepage -> typeSnack\", typeSnack)\n            }}\n        >\n            <Form display=\"flex\" p={1} className={classes.root} noValidate autoComplete=\"off\">\n                <Field as={TextField}\n                    name=\"task_name\"\n                    className={classes.input}\n                    id=\"outlined-basic\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    placeholder=\"task_name\" />\n                <Field as={TextField}\n                    select\n                    name=\"task_type\"\n                    className={classes.input}\n                    id=\"outlined-basic\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    placeholder=\"task_type\"\n                //onChange={handleChangeComboType}\n                >\n                    {dataType.map((option) => (\n                        <option key={option.id} value={option.tasktype_name}>\n                            {option.tasktype_name}\n                        </option>\n                    ))}\n                </Field>\n                <Field as={TextField}\n                    type=\"date\"\n                    id=\"outlined-basic\"\n                    name=\"start_date\"\n                    className={classes.input}\n                    size=\"small\"\n                    defaultValue={moment(new Date())}\n                    variant=\"outlined\"\n                    placeholder=\"start_date\" />\n                <Field as={TextField}\n                    type=\"date\"\n                    id=\"outlined-basic\"\n                    name=\"end_date\"\n                    className={classes.input}\n                    size=\"small\"\n                    defaultValue={moment(new Date())}\n                    variant=\"outlined\"\n                    placeholder=\"end_date\" />\n                <Field as={TextField}\n                    select\n                    name=\"status\"\n                    className={classes.input}\n                    id=\"outlined-basic\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    placeholder=\"status\"\n                //onChange={handleChangeComboStatus}\n                >\n                    {dataStatus && dataStatus.length && dataStatus.map((option, id) => (\n                        <option key={id} value={option.status_name}>\n                            {option.status_name}\n                        </option>\n                    ))}\n                </Field>\n                <Field as={TextField}\n                    select\n                    name=\"assignee\"\n                    className={classes.input}\n                    id=\"outlined-basic\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    placeholder=\"assignee\"\n                //onChange={handleChangeComboAssignee}\n                >\n                    {dataAssignee.map((option, id) => (\n                        <option key={id} value={option.username}>\n                            {option.username}\n                        </option>\n                    ))}\n                </Field>\n                <Button className={classes.button} type=\"submit\" variant=\"contained\" size=\"medium\" color=\"primary\" >\n                    ADD\n            </Button>\n            </Form>\n        </Formik>\n    )\n}"]},"metadata":{},"sourceType":"module"}
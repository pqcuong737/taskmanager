{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Work\\\\Test\\\\taskmanager\\\\src\\\\components\\\\edittask.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useEffect, useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport useSWR, { mutate, trigger } from 'swr';\nimport moment from 'moment';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid'; //dialog\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport config from '../common/config';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  table: {\n    minWidth: 650\n  },\n  caption: {\n    display: 'flex'\n  },\n  input: {\n    width: '100%',\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  button: {\n    marginLeft: theme.spacing(1)\n  },\n  buttonAction: {\n    marginLeft: theme.spacing(1)\n  }\n}));\nconst fetchURL = `${config.apiGetTaskUrl}`;\nexport default function AddTask(props) {\n  const {\n    dataServer,\n    dataDialog,\n    dataType,\n    dataStatus,\n    dataAssignee,\n    handleCloseDialog\n  } = props;\n  const {\n    data\n  } = useSWR(fetchURL, {\n    initialData: dataServer\n  });\n  const classes = useStyles();\n  return __jsx(Formik, {\n    initialValues: {\n      task_name: dataDialog.task_name,\n      task_type: dataDialog.task_type,\n      start_date: moment(dataDialog.start_date).format('YYYY-MM-DD').toString(),\n      end_date: moment(dataDialog.end_date).format('YYYY-MM-DD').toString(),\n      status: dataDialog.status,\n      assignee: dataDialog.assignee\n    },\n    onSubmit: async (values, {\n      setSubmitting\n    }, formikHelpers) => {\n      setTimeout(async () => {\n        const editUrl = `${fetchURL}/${dataDialog.id}`; //const url = fetchURL;\n        //mutate(url);\n\n        await axios.patch(editUrl, values);\n        setSubmitting(false);\n        window.location.reload(); //trigger(url);\n      }, 200);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(Form, {\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, __jsx(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 33\n    }\n  }, __jsx(Field, {\n    as: TextField,\n    name: \"task_name\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    label: \"task_name\",\n    size: \"small\",\n    variant: \"outlined\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }, __jsx(Field, {\n    as: TextField,\n    select: true,\n    name: \"task_type\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    label: \"task_type\",\n    size: \"small\",\n    variant: \"outlined\",\n    placeholder: \"task_type\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 37\n    }\n  }, dataType.map(option => __jsx(\"option\", {\n    key: option.id,\n    value: option.tasktype_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 45\n    }\n  }, option.tasktype_name)))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, __jsx(Field, {\n    as: TextField,\n    type: \"date\",\n    id: \"date\",\n    label: \"task_name\",\n    name: \"start_date\",\n    className: classes.input,\n    size: \"small\",\n    defaultValue: moment(new Date()).format(\"YYYY-MM-DD\"),\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 33\n    }\n  }, __jsx(Field, {\n    as: TextField,\n    type: \"date\",\n    id: \"date\",\n    label: \"end_date\",\n    name: \"end_date\",\n    className: classes.input,\n    size: \"small\",\n    defaultValue: moment(new Date()).format(\"YYYY-MM-DD\"),\n    variant: \"outlined\",\n    InputLabelProps: {\n      shrink: true\n    },\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 33\n    }\n  }, __jsx(Field, {\n    as: TextField,\n    select: true,\n    name: \"status\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    label: \"task_name\",\n    size: \"small\",\n    variant: \"outlined\",\n    placeholder: \"status\",\n    defaultValue: dataDialog.status_name,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 37\n    }\n  }, dataStatus.map((option, id) => __jsx(\"option\", {\n    key: id,\n    value: option.status_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 45\n    }\n  }, option.status_name)))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 33\n    }\n  }, __jsx(Field, {\n    as: TextField,\n    select: true,\n    name: \"assignee\",\n    className: classes.input,\n    id: \"outlined-basic\",\n    label: \"assignee\",\n    size: \"small\",\n    variant: \"outlined\",\n    placeholder: \"assignee\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 37\n    }\n  }, dataAssignee.map((option, id) => __jsx(\"option\", {\n    key: id,\n    value: option.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 45\n    }\n  }, option.username)))))), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    onClick: handleCloseDialog,\n    disabled: isSubmitting,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 29\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    className: classes.button,\n    type: \"submit\",\n    variant: \"contained\",\n    onClick: handleCloseDialog,\n    color: \"primary\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 29\n    }\n  }, \"Save\"))));\n}","map":{"version":3,"sources":["D:/Documents/Work/Test/taskmanager/src/components/edittask.js"],"names":["React","Component","makeStyles","useEffect","useState","Formik","Field","Form","ErrorMessage","useSWR","mutate","trigger","moment","axios","TextField","Button","Grid","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","config","useStyles","theme","root","padding","display","alignItems","table","minWidth","caption","input","width","marginLeft","spacing","flex","button","buttonAction","fetchURL","apiGetTaskUrl","AddTask","props","dataServer","dataDialog","dataType","dataStatus","dataAssignee","handleCloseDialog","data","initialData","classes","task_name","task_type","start_date","format","toString","end_date","status","assignee","values","setSubmitting","formikHelpers","setTimeout","editUrl","id","patch","window","location","reload","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","map","option","tasktype_name","Date","shrink","status_name","username"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useEffect, useState } from 'react'\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport useSWR, { mutate, trigger } from 'swr';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//dialog\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport config from '../common/config'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '2px 4px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    caption: {\r\n        display: 'flex',\r\n    },\r\n    input: {\r\n        width: '100%',\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n    buttonAction: {\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst fetchURL = `${config.apiGetTaskUrl}`;\r\n\r\nexport default function AddTask(props) {\r\n    const { dataServer, dataDialog, dataType, dataStatus, dataAssignee, handleCloseDialog } = props;\r\n    const { data } = useSWR(fetchURL, { initialData: dataServer });\r\n    const classes = useStyles();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                task_name: dataDialog.task_name,\r\n                task_type: dataDialog.task_type,\r\n                start_date: moment(dataDialog.start_date).format('YYYY-MM-DD').toString(),\r\n                end_date: moment(dataDialog.end_date).format('YYYY-MM-DD').toString(),\r\n                status: dataDialog.status,\r\n                assignee: dataDialog.assignee,\r\n            }}\r\n            onSubmit={async (values, { setSubmitting }, formikHelpers) => {\r\n                setTimeout(async () => {\r\n                    const editUrl = `${fetchURL}/${dataDialog.id}`;\r\n                    //const url = fetchURL;\r\n                    //mutate(url);\r\n                    await axios.patch(editUrl, values);\r\n                    setSubmitting(false);\r\n                    window.location.reload();\r\n                    //trigger(url);\r\n                }, 200);\r\n            }}\r\n        >\r\n            {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n                isSubmitting,\r\n            }) => (\r\n                    < Form noValidate autoComplete=\"off\">\r\n                        <DialogContent>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Field as={TextField}\r\n                                        name=\"task_name\"\r\n                                        className={classes.input}\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"task_name\"\r\n                                        size=\"small\"\r\n                                        variant=\"outlined\"\r\n                                        onChange={handleChange} />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Field as={TextField}\r\n                                        select\r\n                                        name=\"task_type\"\r\n                                        className={classes.input}\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"task_type\"\r\n                                        size=\"small\"\r\n                                        variant=\"outlined\"\r\n                                        placeholder=\"task_type\"\r\n                                        onChange={handleChange} >\r\n                                        {dataType.map((option) => (\r\n                                            <option key={option.id} value={option.tasktype_name}>\r\n                                                {option.tasktype_name}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Field>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Field as={TextField}\r\n                                        type=\"date\"\r\n                                        id=\"date\"\r\n                                        label=\"task_name\"\r\n                                        name=\"start_date\"\r\n                                        className={classes.input}\r\n                                        size=\"small\"\r\n                                        defaultValue={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        variant=\"outlined\"\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Field as={TextField}\r\n                                        type=\"date\"\r\n                                        id=\"date\"\r\n                                        label=\"end_date\"\r\n                                        name=\"end_date\"\r\n                                        className={classes.input}\r\n                                        size=\"small\"\r\n                                        defaultValue={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        variant=\"outlined\"\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Field as={TextField}\r\n                                        select\r\n                                        name=\"status\"\r\n                                        className={classes.input}\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"task_name\"\r\n                                        size=\"small\"\r\n                                        variant=\"outlined\"\r\n                                        placeholder=\"status\"\r\n                                        defaultValue={dataDialog.status_name}\r\n                                        onChange={handleChange} >\r\n                                        {dataStatus.map((option, id) => (\r\n                                            <option key={id} value={option.status_name}>\r\n                                                {option.status_name}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Field>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Field as={TextField}\r\n                                        select\r\n                                        name=\"assignee\"\r\n                                        className={classes.input}\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"assignee\"\r\n                                        size=\"small\"\r\n                                        variant=\"outlined\"\r\n                                        placeholder=\"assignee\"\r\n                                        onChange={handleChange} >\r\n                                        {dataAssignee.map((option, id) => (\r\n                                            <option key={id} value={option.username}>\r\n                                                {option.username}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Field>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleCloseDialog} disabled={isSubmitting} color=\"secondary\">\r\n                                Cancel\r\n                                </Button>\r\n                            <Button className={classes.button} type=\"submit\" variant=\"contained\" onClick={handleCloseDialog} color=\"primary\" autoFocus>\r\n                                Save\r\n                                </Button>\r\n                        </DialogActions>\r\n                    </Form>\r\n                )}\r\n        </Formik>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}